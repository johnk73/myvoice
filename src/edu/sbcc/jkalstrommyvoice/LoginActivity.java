package edu.sbcc.jkalstrommyvoice;

import android.app.*;
import android.content.*;
import android.content.pm.*;
import android.os.*;
import android.view.*;
import android.widget.*;

/**
 * MyVoice John Kalstrom Dec 2012 Listens to messages on evoice.com
 * 
 * Activity map: Login -> Inbox -> Message
 * 
 * Login prompts the user for username and password for the eVoice server Once authenticated they are taken to the Inbox
 * activity Upon failure an error message is displayed above the form
 */
public class LoginActivity extends Activity {

	// GUI objects
	private EditText usernameEditText;
	private CheckBox rememberMeCheckBox;
	private EditText passwordEditText;
	private TextView errorMessageLabel;
	private ProgressBar loadingProgressBar;

	// Persistent storage for settings
	SharedPreferences preferences;

	// error message generated by asynctask -- copied to UI in postExecute
	private String errorMessage;

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_login);
		usernameEditText = (EditText) findViewById(R.id.usernameEditText);
		rememberMeCheckBox = (CheckBox) findViewById(R.id.rememberMeCheckBox);
		passwordEditText = (EditText) findViewById(R.id.passwordEditText);
		errorMessageLabel = (TextView) findViewById(R.id.errorMessage);
		loadingProgressBar = (ProgressBar) findViewById(R.id.loadingProgressBar);

		setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
	}

	@Override
	protected void onResume() {
		// TODO Auto-generated method stub
		super.onResume();

		// If preferences contains a username, fill in the field
		preferences = getSharedPreferences("myVoice", MODE_PRIVATE);
		String username = preferences.getString("username", "");
		if (username.length() > 0 && usernameEditText.getText().toString().length() == 0) {
			usernameEditText.setText(username);
			rememberMeCheckBox.setChecked(true);
		}
	}

	// 1) User SUBMITS login information
	public void onLoginButtonClick(View v) {
		// Request already in progress? Ignore button click.

		// Validate username and password
		errorMessage = null;
		errorMessageLabel.setText("");
		String username = usernameEditText.getText().toString();
		String password = passwordEditText.getText().toString();
		if (username.trim().length() == 0) {
			errorMessage = getString(R.string.field_is_empty);
			usernameEditText.requestFocus();
		}
		if (password.trim().length() == 0) {
			errorMessage = getString(R.string.field_is_empty);
			passwordEditText.requestFocus();
		}
		if (errorMessage != null) {
			errorMessageLabel.setText(errorMessage);
			return;
		}

		// Reveal progress bar to entertain user during web request
		loadingProgressBar.setVisibility(View.VISIBLE);

		// Make asynchronous login request
		new LoginAsyncTask().execute(new String[] { username, password });
	}

	/**
	 * Send login request to eVoice HTTP server EvoiceSession retains the authentication cookies for future requests
	 */
	class LoginAsyncTask extends AsyncTask<String, Integer, Boolean> {
		String username;

		@Override
		protected Boolean doInBackground(String... args) {
			// Need username and password
			if (args.length < 2)
				return false;
			username = args[0];

			// Create request URL
			String url = getResources().getString(R.string.login_url);
			url = url.replaceAll("USERNAME", args[0]).replaceAll("PASSWORD", args[1]);

			// Share http connection via singleton, so it will retain authentication cookies
			EvoiceSession httpclient = EvoiceSession.getInstance(LoginActivity.this);
			if (httpclient.sendRequest(url) != 1) {
				errorMessage = httpclient.getErrorMessage();
				return false;
			}

			errorMessage = "Successful login";
			return true;
		}

		@Override
		protected void onPostExecute(Boolean result) {
			// Display error message, if any
			if (errorMessage != null) {
				errorMessageLabel.setText(errorMessage);
			}
			// Hide progress bar
			loadingProgressBar.setVisibility(View.INVISIBLE);

			// 2) Login succeeds -- DISPLAY INBOX
			if (result == true) {
				// If user asked to remember username, store in settings
				if (rememberMeCheckBox.isChecked()) {
					preferences.edit().putString("username", username).commit();
				}

				Intent intent = new Intent(LoginActivity.this, InboxActivity.class);
				intent.putExtra("USERNAME", username);
				startActivity(intent);
			}
		}
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		getMenuInflater().inflate(R.menu.activity_login, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		boolean b = true;
		switch (item.getItemId()) {
		case R.id.menu_settings:
			startActivity(new Intent(this, edu.sbcc.jkalstrommyvoice.EditPreferencesActivity.class));
			break;
		default:
			b = super.onOptionsItemSelected(item);
			break;
		}
		return b;
	}

}
