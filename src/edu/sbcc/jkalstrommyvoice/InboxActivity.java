package edu.sbcc.jkalstrommyvoice;

import java.util.*;

import android.app.*;
import android.content.*;
import android.os.*;
import android.view.*;
import android.widget.*;
import android.widget.AdapterView.OnItemClickListener;

import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.node.*;

/**
 * Inbox displays message summary information in a ListView When the user selects a message they are taken to the
 * Message activity
 */
public class InboxActivity extends Activity implements OnItemClickListener {
	// GUI objects
	private ProgressBar loadingProgressBar;
	private TextView errorMessageLabel;

	// error message generated by asynctask -- copied to UI in postExecute
	private String errorMessage;

	ArrayList<Message> inboxMessages = new ArrayList<Message>();
	private MessageAdapter messagesAdapter;
	private ListView inboxList;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// GUI setup
		super.onCreate(savedInstanceState);
		getApplicationContext().setTheme(R.style.AppTheme);
		setContentView(R.layout.activity_inbox);
		errorMessageLabel = (TextView) findViewById(R.id.errorMessageInbox);
		loadingProgressBar = (ProgressBar) findViewById(R.id.loadingProgressBarInbox);
		inboxList = (ListView) findViewById(R.id.inboxListView);

		// Username passed from login
		String username = getIntent().getStringExtra("USERNAME");
		if (username == null) {
			errorMessageLabel.setText("Empty username");
			return;
		}

		// ListView data comes from in-memory array that will be populated with
		// eVoice server response
		messagesAdapter = new MessageAdapter(this, R.layout.listview_message, inboxMessages);
		inboxList.setAdapter(messagesAdapter);

		// Reveal progress bar to entertain user during web request
		loadingProgressBar.setVisibility(View.VISIBLE);
		errorMessageLabel.setText("Loading messages");

		// 3) GET MESSAGE LIST
		new InboxAsyncTask().execute(new String[] { username });
	}

	/*
	 * @Override public boolean onCreateOptionsMenu(Menu menu) { getMenuInflater().inflate(R.menu.activity_inbox, menu);
	 * return true; }
	 */

	// User has selected a message
	public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
		Intent intent = new Intent(this, MessageActivity.class);
		intent.putExtra("MESSAGE", inboxMessages.get(position));
		startActivity(intent);
	}

	/**
	 * Send inbox request to eVoice HTTP server
	 */
	class InboxAsyncTask extends AsyncTask<String, Integer, Boolean> {
		@Override
		protected Boolean doInBackground(String... args) {
			// Need username
			if (args.length < 1)
				return false;

			// Create request URL
			String url = getResources().getString(R.string.inbox_url);
			url = url.replaceAll("USERNAME", args[0]);

			// Share http connection via singleton, to resend authentication cookies
			EvoiceSession httpclient = EvoiceSession.getInstance(InboxActivity.this);
			if (httpclient.sendRequest(url) != 1) {
				errorMessage = httpclient.getErrorMessage();
				return false;
			}

			// Parse out inbox data and add to model
			JsonNode apiResults = httpclient.getApiResults();
			if (apiResults == null) {
				errorMessage = "Invalid JSON response";
				return false;
			}
			JsonNode messages = apiResults.findValue("messages");
			if (messages == null || !(messages instanceof ArrayNode)) {
				errorMessage = "Invalid JSON response";
				return false;
			}
			// step through messages
			for (Iterator<JsonNode> ite = ((ArrayNode) messages).elements(); ite.hasNext();) {
				JsonNode messageNode = ite.next();

				// Validate message, else skip
				boolean goodMessage = true;
				for (String field : new String[] { "from", "received", "length", "id", "contents" }) {
					if (!messageNode.has(field)) {
						goodMessage = false;
						break;
					}
				}
				if (!goodMessage)
					continue;

				// Create node in model
				Message message = new Message();
				message.callerID = messageNode.get("from").asText();
				message.date = messageNode.get("received").asText();
				message.duration = messageNode.get("length").asText();
				message.id = messageNode.get("id").asInt();
				message.speechToText = messageNode.get("contents").asText();
				inboxMessages.add(message);
			}

			if (inboxMessages.size() == 0) {
				errorMessage = "No messages";
			}
			return true;
		}

		@Override
		protected void onPostExecute(Boolean result) {
			// Display error message, if any
			if (errorMessage != null) {
				errorMessageLabel.setText(errorMessage);
			}
			// Hide progress bar
			loadingProgressBar.setVisibility(View.INVISIBLE);

			// If login was successful, display inbox
			if (result == true) {
				messagesAdapter.notifyDataSetChanged();

				// Run onItemClick() when user clicks an item
				inboxList.setOnItemClickListener(InboxActivity.this);
			}
		}
	}
}
